0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.4.14
3 info using node@v0.10.29
4 verbose publish [ '.' ]
5 verbose cache add [ '.', null ]
6 verbose cache add name=undefined spec="." args=[".",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: '.',
7 verbose parsed url   path: '.',
7 verbose parsed url   href: '.' }
8 silly lockFile 3a52ce78- .
9 verbose lock . /Users/alex/.npm/3a52ce78-.lock
10 verbose tar pack [ '/Users/alex/.npm/node-springboard/0.0.15/package.tgz', '.' ]
11 verbose tarball /Users/alex/.npm/node-springboard/0.0.15/package.tgz
12 verbose folder .
13 info prepublish node-springboard@0.0.15
14 silly lockFile 1f1177db-tar tar://.
15 verbose lock tar://. /Users/alex/.npm/1f1177db-tar.lock
16 silly lockFile d88c4190-e-springboard-0-0-15-package-tgz tar:///Users/alex/.npm/node-springboard/0.0.15/package.tgz
17 verbose lock tar:///Users/alex/.npm/node-springboard/0.0.15/package.tgz /Users/alex/.npm/d88c4190-e-springboard-0-0-15-package-tgz.lock
18 silly lockFile 1f1177db-tar tar://.
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile d88c4190-e-springboard-0-0-15-package-tgz tar:///Users/alex/.npm/node-springboard/0.0.15/package.tgz
21 silly lockFile d88c4190-e-springboard-0-0-15-package-tgz tar:///Users/alex/.npm/node-springboard/0.0.15/package.tgz
22 silly lockFile 2ef31cd1--node-springboard-0-0-15-package /Users/alex/.npm/node-springboard/0.0.15/package
23 verbose lock /Users/alex/.npm/node-springboard/0.0.15/package /Users/alex/.npm/2ef31cd1--node-springboard-0-0-15-package.lock
24 silly lockFile 2ef31cd1--node-springboard-0-0-15-package /Users/alex/.npm/node-springboard/0.0.15/package
25 silly lockFile 2ef31cd1--node-springboard-0-0-15-package /Users/alex/.npm/node-springboard/0.0.15/package
26 silly lockFile 3a52ce78- .
27 silly lockFile 3a52ce78- .
28 silly publish { name: 'node-springboard',
28 silly publish   version: '0.0.15',
28 silly publish   description: 'Node JS library for interacting with Springboard Retail API',
28 silly publish   main: 'index.js',
28 silly publish   scripts: { test: 'node test/all.js' },
28 silly publish   repository:
28 silly publish    { type: 'git',
28 silly publish      url: 'https://github.com/alexthedev/node-springboard.git' },
28 silly publish   keywords: [ 'springboard', 'retail' ],
28 silly publish   author: { name: 'Alex Nielsen' },
28 silly publish   license: 'MIT',
28 silly publish   bugs: { url: 'https://github.com/alexthedev/node-springboard/issues' },
28 silly publish   homepage: 'https://github.com/alexthedev/node-springboard',
28 silly publish   dependencies: { restler: '~3.2.2' },
28 silly publish   devDependencies: { nodeunit: '0.8.2' },
28 silly publish   readme: 'node-springboard\n================\nNode JS Library for Interacting with Springboard Retail API. Uses the [restler] (https://github.com/danwrong/restler) module as its foundation for querying the service.\n\n[Springboard Retail](http://www.springboardretail.com) is a cloud based point-of-sale system that is well designed and highly accessible. Refer to their [API docs](http://dev.springboardretail.com) for details on API usage.\n\nThis is a work on progress. I\'ll be adding more methods over time.\n\nThis is my first foray into Node. Forgive the lack of tests, I\'m one of "those" people.\n\nInstalling and Configuring\n--------------------------\n```\nnpm install node-springboard\n```\n\nRequire the module, passing in a valid domain, user, and password. Then experience Springboard API nirvana.\n\n```javascript\nvar springboard = require(\'node-springboard\')(\'mydomain\', \'myuser\', \'mypassword\');\n```\n\nUsage\n-----\n####Basic Example\n```javascript\nvar springboard = require(\'node-springboard\')(\'mydomain\', \'myuser\', \'mypassword\');\n\nspringboard.getItem(100001, function(err, data, response) {\n\t// Check for error and handle\n\tif(err) {\n\t\t// Handle error\n\t} else {\n\t\t// Outputs JSON information returned by Springboard\n\t\tconsole.dir(data);\n\t}\n});\n```\n\n####General Use\nThis module follows the Node callback convention of passing either null or an Error object as the first argument of the callback. See the basic example above.\n\nAll functions in this module expect a callback that accepts three parameters: _err_, _data_, and _response_.\n\n#####Err\nAn Error object if there was a problem; null if not. Always check for this first in your callbacks.\n\n#####Data\nVaries based on the method call. \n\nMethods beginning with "create" will return a hash with a "path" and "objectId" value. For example:\n\n```javascript\nspringboard.createVendor(\'New Vendor\', {\'public_id\': \'NEW\'}, function(err, data, response) {\n\t// Outputs \'/api/purchasing/vendors/100002\' where 100002 is the ID of the new vendor.\n\tconsole.log(data.path);\n\t\n\t// Outputs \'100002\' where 100002 is the ID of the new vendor.\n\tconsole.log(data.objectId);\n});\n```\n\nAll other methods will return the JSON object returned by the Springboard API, easily accessible through dot notation or your preferred method of data access.\n\n#####Response\nThe raw response as returned by [restler](https://github.com/danwrong/restler). Refer to restler documentation for info on how to interact with this object. \n\n####API\nAs a general rule, API method signatures begin with data required by Springboard, then accept a hash parameter for other data, and finally method callback. I\'m not fully sold on this design yet but it works. For now, only parameters that are not self explanatory are documented. \n\n#####data parameter\nThe data parameter in the method calls is the catch all of capturing information not necessariliy required by the API. The following example creates an item that includes some custom fields:\n\n```javascript\nspringboard.createItem(1.44, {\'description\': \'This is my description\', \'custom\': {\'department\': \'37: Hard Crafts\'}}, function(err, data, response) {\n\tconsole.log(data.path);\n\tconsole.log(data.objectId);\n});\n```\n\n#####createInventoryAdjustment(locationId, itemId, adjustmentReasonId, qtyAdjust, cost, data, callback)\n_Note: Undocumented API method._\n\nCreates an inventory adjustment entry.\n\n_qtyAdjust_: The quantity adjustment to make to current on hand counts. NOT the on hand count.\n\n#####createItem(cost, data, callback)\nCreates an item. Cost is the only field required by Springboard. However, if you have custom fields that are required, you will have to provide those via the data parameter.\n\n#####createItemVendor(itemId, vendorId, data, callback)\n_Note: Undocumented API method._\n\nCreates a vendor record for an item (sometimes called a source record).\n\n#####createTicket(data, callback)\nCreates a sales ticket.\n\n#####createTicketLine(ticketId, data, callback)\n_Note: The Springboard API does not currently provide the newly created ID for a ticket line. Not sure why_\nCreates a line for a given ticket ID.\n\n#####createVendor(name, data, callback)\nCreates a vendor.\n\n#####createVendorAddress(vendorId, city, state, country, postalCode, data, callback)\n_Note: Undocumented API method_\nCreates an address for a vendor. \n\n#####createVendorContact(vendorId, data, callback)\n_Note: Undocumented API method_\nCreates a contact for a vendor.\n\n#####getGiftCard(giftCardNumber, callback)\nGets gift card with the given number. Springboard throws an error if the gift card is not found.\n\n#####getInventoryValues(data, callback)\nGets inventory values. Recommend using convenience methods for retrieving inventory values for a given item ID by location.\n\n#####getInventoryValuesByLocation(itemId, data, callback)\nGets inventory values for an item, grouped by location.\n\n#####getItem(id, callback)\nRetrieves an item based on its ID.\n\n#####getItemByLookup(lookup, callback)\nRetrieves an item based on its lookup code.\n\n#####getItemsByFilter(jsonFilter, callback)\nRetrieve items based on advanced JSON filter.\n\n#####getItemVendors(id, callback)\nRetrieves vendor records for a given item ID.\n\n#####getTicket(id, callback)\nRetrieves a ticket based on its ID.\n\n#####getTicketLines(id, callback)\nRetrieves ticket lines based on a ticket ID.\n\n#####getVendor(id, callback)\nRetrieves a vendor based on its ID.\n\n#####getVendorsByFilter(jsonFilter, callback)\nRetrieve vendors based on advanced JSON filter.\n\n#####searchItems(searchTerm, page, perPage, callback)\nA basic way to query items using Springboard\'s standard search. Springboard has a sophisticated query system that is not yet implemented in this module.\n\n#####searchVendors(searchTerm, page, perPage, callback)\nA basic way to query vendors using Springboard\'s standard search. Springboard has a sophisticated query system that is not yet implemented in this module.\n\n#####updateItem(id, data, callback)\nUpdate an item.\n\n#####updateVendor(id, data, callback)\nUpdate a vendor.\n\n\n\n\n',
28 silly publish   readmeFilename: 'README.md',
28 silly publish   gitHead: '284d4a84b1033138f2aea696f5a3e4e3b7f9af80',
28 silly publish   _id: 'node-springboard@0.0.15',
28 silly publish   _shasum: '35e3b2818ddb4fdd46766b5ecec98552894fe836',
28 silly publish   _from: '.' }
29 verbose url raw node-springboard
30 verbose url resolving [ 'https://registry.npmjs.org/', './node-springboard' ]
31 verbose url resolved https://registry.npmjs.org/node-springboard
32 info trying registry request attempt 1 at 17:32:54
33 http PUT https://registry.npmjs.org/node-springboard
34 http 403 https://registry.npmjs.org/node-springboard
35 verbose headers { date: 'Thu, 01 Jan 2015 00:12:10 GMT',
35 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
35 verbose headers   'content-type': 'application/json',
35 verbose headers   'cache-control': 'max-age=60',
35 verbose headers   'content-length': '9461',
35 verbose headers   'accept-ranges': 'bytes',
35 verbose headers   via: '1.1 varnish',
35 verbose headers   'x-served-by': 'cache-lax1432-LAX',
35 verbose headers   'x-cache': 'MISS',
35 verbose headers   'x-cache-hits': '0',
35 verbose headers   'x-timer': 'S1420071130.493287,VS0,VE144',
35 verbose headers   'keep-alive': 'timeout=10, max=50',
35 verbose headers   connection: 'Keep-Alive' }
36 error publish Failed PUT 403
37 error Error: forbidden cannot modify pre-existing version: 0.0.15
37 error old={"name":"node-springboard","version":"0.0.15","description":"Node JS library for interacting with Springboard Retail API","main":"index.js","scripts":{"test":"node test/all.js"},"repository":{"type":"git","url":"https://github.com/alexthedev/node-springboard.git"},"keywords":["springboard","retail"],"author":{"name":"Alex Nielsen"},"license":"MIT","bugs":{"url":"https://github.com/alexthedev/node-springboard/issues"},"homepage":"https://github.com/alexthedev/node-springboard","dependencies":{"restler":"~3.2.2"},"devDependencies":{"nodeunit":"0.8.2"},"gitHead":"284d4a84b1033138f2aea696f5a3e4e3b7f9af80","_id":"node-springboard@0.0.15","_shasum":"35e3b2818ddb4fdd46766b5ecec98552894fe836","_from":".","_npmVersion":"1.4.14","_npmUser":{"name":"alexthedev","email":"alex@portersonline.com"},"maintainers":[{"name":"alexthedev","email":"alex@portersonline.com"}],"dist":{"shasum":"35e3b2818ddb4fdd46766b5ecec98552894fe836","tarball":"http://registry.npmjs.org/node-springboard/-/node-springboard-0.0.15.tgz"}}
37 error new={"name":"node-springboard","version":"0.0.15","description":"Node JS library for interacting with Springboard Retail API","main":"index.js","scripts":{"test":"node test/all.js"},"repository":{"type":"git","url":"https://github.com/alexthedev/node-springboard.git"},"keywords":["springboard","retail"],"author":{"name":"Alex Nielsen"},"license":"MIT","bugs":{"url":"https://github.com/alexthedev/node-springboard/issues"},"homepage":"https://github.com/alexthedev/node-springboard","dependencies":{"restler":"~3.2.2"},"devDependencies":{"nodeunit":"0.8.2"},"readme":"node-springboard\u000a================\u000aNode JS Library for Interacting with Springboard Retail API. Uses the [restler] (https://github.com/danwrong/restler) module as its foundation for querying the service.\u000a\u000a[Springboard Retail](http://www.springboardretail.com) is a cloud based point-of-sale system that is well designed and highly accessible. Refer to their [API docs](http://dev.springboardretail.com) for details on API usage.\u000a\u000aThis is a work on progress. I'll be adding more methods over time.\u000a\u000aThis is my first foray into Node. Forgive the lack of tests, I'm one of \"those\" people.\u000a\u000aInstalling and Configuring\u000a--------------------------\u000a```\u000anpm install node-springboard\u000a```\u000a\u000aRequire the module, passing in a valid domain, user, and password. Then experience Springboard API nirvana.\u000a\u000a```javascript\u000avar springboard = require('node-springboard')('mydomain', 'myuser', 'mypassword');\u000a```\u000a\u000aUsage\u000a-----\u000a####Basic Example\u000a```javascript\u000avar springboard = require('node-springboard')('mydomain', 'myuser', 'mypassword');\u000a\u000aspringboard.getItem(100001, function(err, data, response) {\u000a\u0009// Check for error and handle\u000a\u0009if(err) {\u000a\u0009\u0009// Handle error\u000a\u0009} else {\u000a\u0009\u0009// Outputs JSON information returned by Springboard\u000a\u0009\u0009console.dir(data);\u000a\u0009}\u000a});\u000a```\u000a\u000a####General Use\u000aThis module follows the Node callback convention of passing either null or an Error object as the first argument of the callback. See the basic example above.\u000a\u000aAll functions in this module expect a callback that accepts three parameters: _err_, _data_, and _response_.\u000a\u000a#####Err\u000aAn Error object if there was a problem; null if not. Always check for this first in your callbacks.\u000a\u000a#####Data\u000aVaries based on the method call. \u000a\u000aMethods beginning with \"create\" will return a hash with a \"path\" and \"objectId\" value. For example:\u000a\u000a```javascript\u000aspringboard.createVendor('New Vendor', {'public_id': 'NEW'}, function(err, data, response) {\u000a\u0009// Outputs '/api/purchasing/vendors/100002' where 100002 is the ID of the new vendor.\u000a\u0009console.log(data.path);\u000a\u0009\u000a\u0009// Outputs '100002' where 100002 is the ID of the new vendor.\u000a\u0009console.log(data.objectId);\u000a});\u000a```\u000a\u000aAll other methods will return the JSON object returned by the Springboard API, easily accessible through dot notation or your preferred method of data access.\u000a\u000a#####Response\u000aThe raw response as returned by [restler](https://github.com/danwrong/restler). Refer to restler documentation for info on how to interact with this object. \u000a\u000a####API\u000aAs a general rule, API method signatures begin with data required by Springboard, then accept a hash parameter for other data, and finally method callback. I'm not fully sold on this design yet but it works. For now, only parameters that are not self explanatory are documented. \u000a\u000a#####data parameter\u000aThe data parameter in the method calls is the catch all of capturing information not necessariliy required by the API. The following example creates an item that includes some custom fields:\u000a\u000a```javascript\u000aspringboard.createItem(1.44, {'description': 'This is my description', 'custom': {'department': '37: Hard Crafts'}}, function(err, data, response) {\u000a\u0009console.log(data.path);\u000a\u0009console.log(data.objectId);\u000a});\u000a```\u000a\u000a#####createInventoryAdjustment(locationId, itemId, adjustmentReasonId, qtyAdjust, cost, data, callback)\u000a_Note: Undocumented API method._\u000a\u000aCreates an inventory adjustment entry.\u000a\u000a_qtyAdjust_: The quantity adjustment to make to current on hand counts. NOT the on hand count.\u000a\u000a#####createItem(cost, data, callback)\u000aCreates an item. Cost is the only field required by Springboard. However, if you have custom fields that are required, you will have to provide those via the data parameter.\u000a\u000a#####createItemVendor(itemId, vendorId, data, callback)\u000a_Note: Undocumented API method._\u000a\u000aCreates a vendor record for an item (sometimes called a source record).\u000a\u000a#####createTicket(data, callback)\u000aCreates a sales ticket.\u000a\u000a#####createTicketLine(ticketId, data, callback)\u000a_Note: The Springboard API does not currently provide the newly created ID for a ticket line. Not sure why_\u000aCreates a line for a given ticket ID.\u000a\u000a#####createVendor(name, data, callback)\u000aCreates a vendor.\u000a\u000a#####createVendorAddress(vendorId, city, state, country, postalCode, data, callback)\u000a_Note: Undocumented API method_\u000aCreates an address for a vendor. \u000a\u000a#####createVendorContact(vendorId, data, callback)\u000a_Note: Undocumented API method_\u000aCreates a contact for a vendor.\u000a\u000a#####getGiftCard(giftCardNumber, callback)\u000aGets gift card with the given number. Springboard throws an error if the gift card is not found.\u000a\u000a#####getInventoryValues(data, callback)\u000aGets inventory values. Recommend using convenience methods for retrieving inventory values for a given item ID by location.\u000a\u000a#####getInventoryValuesByLocation(itemId, data, callback)\u000aGets inventory values for an item, grouped by location.\u000a\u000a#####getItem(id, callback)\u000aRetrieves an item based on its ID.\u000a\u000a#####getItemByLookup(lookup, callback)\u000aRetrieves an item based on its lookup code.\u000a\u000a#####getItemsByFilter(jsonFilter, callback)\u000aRetrieve items based on advanced JSON filter.\u000a\u000a#####getItemVendors(id, callback)\u000aRetrieves vendor records for a given item ID.\u000a\u000a#####getTicket(id, callback)\u000aRetrieves a ticket based on its ID.\u000a\u000a#####getTicketLines(id, callback)\u000aRetrieves ticket lines based on a ticket ID.\u000a\u000a#####getVendor(id, callback)\u000aRetrieves a vendor based on its ID.\u000a\u000a#####getVendorsByFilter(jsonFilter, callback)\u000aRetrieve vendors based on advanced JSON filter.\u000a\u000a#####searchItems(searchTerm, page, perPage, callback)\u000aA basic way to query items using Springboard's standard search. Springboard has a sophisticated query system that is not yet implemented in this module.\u000a\u000a#####searchVendors(searchTerm, page, perPage, callback)\u000aA basic way to query vendors using Springboard's standard search. Springboard has a sophisticated query system that is not yet implemented in this module.\u000a\u000a#####updateItem(id, data, callback)\u000aUpdate an item.\u000a\u000a#####updateVendor(id, data, callback)\u000aUpdate a vendor.\u000a\u000a\u000a\u000a\u000a","readmeFilename":"README.md","gitHead":"284d4a84b1033138f2aea696f5a3e4e3b7f9af80","_id":"node-springboard@0.0.15","_shasum":"35e3b2818ddb4fdd46766b5ecec98552894fe836","_from":".","_npmVersion":"1.4.14","_npmUser":{"name":"alexthedev","email":"alex@portersonline.com"},"maintainers":[{"name":"alexthedev","email":"alex@portersonline.com"}],"dist":{"shasum":"35e3b2818ddb4fdd46766b5ecec98552894fe836","tarball":"http://registry.npmjs.org/node-springboard/-/node-springboard-0.0.15.tgz"}}: node-springboard
37 error     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:274:14)
37 error     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:212:65)
37 error     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:123:22)
37 error     at Request.emit (events.js:98:17)
37 error     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:893:14)
37 error     at Request.emit (events.js:117:20)
37 error     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:844:12)
37 error     at IncomingMessage.emit (events.js:117:20)
37 error     at _stream_readable.js:929:16
37 error     at process._tickCallback (node.js:419:13)
38 error If you need help, you may report this *entire* log,
38 error including the npm and node versions, at:
38 error     <http://github.com/npm/npm/issues>
39 error System Darwin 13.2.0
40 error command "node" "/usr/local/bin/npm" "publish"
41 error cwd /Users/alex/Documents/Dev/tools/node-springboard
42 error node -v v0.10.29
43 error npm -v 1.4.14
44 verbose exit [ 1, true ]
